generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PortalConfig {
  id                String   @id @default(cuid()) // There should only be one row in this table.
  nameKey           String
  defaultLanguage   Language @relation(fields: [defaultLanguageId], references: [id])
  defaultLanguageId String   @unique

  adminMeasurementUnits         MeasurementUnits @default(Metric)
  clientDefaultMeasurementUnits MeasurementUnits @default(Metric)

  maxDesignWidthMm  Float
  maxDesignHeightMm Float
}

enum MeasurementUnits {
  Metric
  Imperial
}

model Language {
  id                      String                @id @default(cuid())
  nameKey                 String
  defaultLanguageInPortal PortalConfig?
  materialDescriptions    MaterialDescription[]
  translations            Json
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model User {
  id   String  @id @default(cuid())
  name String?

  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  preferredMeasurementUnits MeasurementUnits @default(Metric)

  designs     Design[]
  basketParts BasketPart[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DiscountBreak {
  id                 String @id @default(cuid())
  minQty             Int
  discountAmount     Int?
  discountPercentage Float?
}

model BasketPart {
  id String @id @default(cuid())

  material   Material? @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  materialId String?

  quantity  Int?
  unitPrice Int?

  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  design   Design? @relation(fields: [designId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  designId String?
}

model Design {
  id String @id @default(cuid())

  name             String
  originalFile     File    @relation(name: "DesignOriginalFile", fields: [originalFileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  originalFileId   String  @unique
  estimationFile   File?   @relation(name: "DesignEstimationFile", fields: [estimationFileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  estimationFileId String? @unique

  selectionData Json?

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  basketParts BasketPart[]
}

model File {
  id String @id @default(cuid())

  filename String
  location String

  designOriginal   Design? @relation(name: "DesignOriginalFile")
  designEstimation Design? @relation(name: "DesignEstimationFile")
}

model MaterialVariant {
  id      String @id @default(cuid())
  nameKey String

  materialsCategory   MaterialsCategory? @relation(fields: [materialsCategoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  materialsCategoryId String?

  materialDescriptions MaterialDescription[]

  materialUsageMethod MaterialUsageMethod

  materials Material[]
  sizes     MaterialSize[]

  scoreable          Boolean
  scoringSpeedMmPerS Float

  engraveable          Boolean
  engravingSpeedMmPerS Float
}

enum MaterialUsageMethod {
  SheetSize
  PartSize
}

model MaterialsCategory {
  id               String            @id @default(cuid())
  nameKey          String
  materialVariants MaterialVariant[]
}

model MaterialSize {
  id                String          @id @default(cuid())
  materialVariant   MaterialVariant @relation(fields: [materialVariantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  materialVariantId String
  widthMm           Float
  heightMm          Float
}

model Material {
  id              String          @id @default(cuid())
  nameKey         String
  materialVariant MaterialVariant @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  materialId      String

  thicknessMm Float

  cuttable           Boolean
  cuttingSpeedMmPerS Float

  pricePerM2 Float

  basketParts BasketPart[]
}

model MaterialDescription {
  id                String          @id @default(cuid())
  language          Language        @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  languageId        String
  materialVariant   MaterialVariant @relation(fields: [materialVariantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  materialVariantId String
}
